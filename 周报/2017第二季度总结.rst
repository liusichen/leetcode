2017年第二季度总结与计划
========

.. Contents :: 目录


总结
~~~~

本人于4月中旬以实习生的身份加入该团队。
在这个季度的前50天左右，主要是以学习为主。
之后便是go-purge-api项目的二次开发及完善。
紧接着便是fast项目的启动开发，参与了cli的开发。

学习
````
  
- go语言的学习

  + 总结
  
  ::

      按照强哥要求，在初期主要学习go语言圣经，看示例代码，看项目代码
      中途完成了两个练手项目log_analyze和ggzip项目.通过读书看代码以及小项目的驱动，
      明显感受到自身的提升。

  +  不足之处：

  ::

      没有好的看代码的习惯，还需要培养。
      有些拖拉，学习动力不足。而且近期学习速度下降

- 项目规范、编码效率学习

  + 总结

  ::
      
      从commit提交，文档编写等各个方面进行学习
      理解了commit对于理解项目进度的重要性，以及文档的关键。
      在自己编写代码的时候，后者在看他人代码的时候，通过commit和文档很方便寻找到自己的思路或者他人的思路


  + 不足之处

  ::

      rst文档书写熟悉度不足。
      commit书写有时过于抽象，自己有的时候都不理解

- 总结

  + 从语言，项目规范，文档书写等各个方面有了很大提高
  + 不懂就要问，从岩哥他们那学到了很多的东西
  + 学习需要有计划的进行，要有目标，这样才能提高


go-purge-api
````````````

- 代码阅读

  + 总结
  
  ::
      
      第一次接触一个go的项目，从文档到api，再到g库，到service库，再到purge。对一个服务的框架有了初步认识
      对于阅读代码的方式寻找到了自己的方式

  + 不足
  
  ::

      阅读速度还是很慢，看代码每个模块过于独立阅读，没有从项目需求的角度去阅读

- 二次开发及文档梳理
  
  + 总结

  ::
    
      对于新的需求进行二次开发，进行了大面的修改。并对文档进行的再次书写

  + 不足

  ::

      二次开发完成没有测试代码，并且项目推进的速度很慢。
      与其它相关人员沟通不足。

  
- 总结

  + 阅读项目代码的速度很重要，理解api是比较关键的部分
  + 阅读代码需要将需求深入了解，这样看代码的时候才能知道这些函数是干什么的
  + 二次开发最好不要将核心能力过多的改动

fast/cli
```````

- 开发、文档及测试编写
  
  + 总结

  ::

      从需求分析，需求文档书写，项目开发，测试书写，全部独立完成

  + 不足

  :: 

      最初代码的耦合度太高，不易修改与扩展
      代码测试编写的重视度不够。测试代码为零

- 总结

  + 代码函数单元书写之前，最好有测试的存在，在内部逻辑变化之后便于局部测试
  + 代码commit的时候最好有逻辑性的commit，这样commit树看起来才很有条理

整体总结
```````

- 自己本身对go语言的理解还不是很深，还需要回归书本，深入学习
- 自己代码规范性还很薄弱，需要多练习，多注意
- 在项目中对自己没有要求，只有严格要求自己，才能不断提高自己，才能成长

计划
~~~~

- 对fast其它模块的阅读熟悉，争取能全局把握这个项目，能独立完成新的功能添加
- 对go语言再次深入学习，整理一些学习资料，便于自己复习
- 对git的使用深入了解，最好能从原理中理解，对数据库进行提高
- 不断提高自己，争取获得转正机会！！
